'scopeName': 'source.openedge'
'name': 'OpenEdge'
'fileTypes': [
    'p'
    'w'
    'cls'
    'i'
]
'patterns': [
    {
        'include': '#strings'
    }
    {
        'include': '#forStatement'
    }
    {
        'include': '#doStatement'
    }
    {
        'include': '#defineStatements'
    }
    {
        'begin': '/\\*'
        'end': '\\*/'
        'name': 'comment.block.oe'
    }
    {
        'include': '#preProcVar'
    }
    {
        'begin': '\{(?!&)'
        'end': '\}'
        'name': 'string.interpolated.include.oe'
    }
    {
        'include': '#oeConstants'
    }
]
'repository':
    'defineStatements':
        'patterns': [
            {
                'begin': '^\\s*(?i:(def(?:ine)))\\s*'
                'end': '\\.\\s'
                'name': 'meta.keyword.other.define.oe'
                'patterns': [
                    {
                        'include': '#strings'
                    }
                    {
                        'include': '#numbers'
                    }
                    {
                        'include': '#modifiers'
                    }
                    {
                        'include': '#oeConstants'
                    }
                    {
                        'match': '\\b([\\w\\d_\-]*)\\s*(?i:(as))\\s*([\\w\\d_\\-]*(?:\\.\\w*)*)'
                        'captures':
                            '1':
                                'name': 'variable.other.oe'
                            '3':
                                'name': 'storage.type.oe'
                    }
                ]
            }
        ]
    'strings':
      'patterns': [
        {
          'begin': '"'
          'end': '"'
          'name': 'string.quoted.double.oe'
          'patterns': [
            {
              'match': '\~.'
              'name': 'constant.character.escape.oe'
            }
            {
                'include': '#preProcVar'
            }
          ]
        }
        {
          'begin': '\''
          'end': '\''
          'name': 'string.quoted.single.oe'
          'patterns': [
            {
              'match': '\~.'
              'name': 'constant.character.escape.oe'
            }
            {
                'include': '#preProcVar'
            }
            {
                'include': '#oeConstants'
            }
          ]
        }
      ]
    'numbers':
        'patterns': [
            {
                'match': '\\s\\.?[\\d\\.]*\\d\\b'
                'name': 'constant.numeric.oe'
            }
        ]
    'modifiers':
        'patterns': [
            {
                'match': '\\b(static|private|public|protected|global|shared|new|final|abstract)\\b'
                'name': 'storage.modifier.oe'
            }
        ]
    'preProcVar':
        'patterns': [
            {
                'match': '\{&[\\w_\-]+\}'
                'name': 'constant.other.preprocessor.oe'
            }
        ]
    'oeConstants':
        'patterns': [
            {
                'match': '(?:[^\\w-])(?i:(yes|no|true|false))(?:[^\\w-])'
                'captures':
                    '1':
                        'name': 'constant.language.oe'
            }
        ]
    'forStatement':
        'patterns': [
            {
                'begin': '^(?:\\s*\\b)(?i:(for))(?:[^\\w-])'
                'end': '[\\.:]\\s*\$'
                'name': 'keyword.other.for.oe'
                'patterns': [
                    {
                        'include': '#oeConstants'
                    }
                    {
                        'include': '#numbers'
                    }
                    {
                        'include': '#strings'
                    }
                    {
                        'include': '#preProcVar'
                    }
                    {
                        'match': '\\b(?i:each|first|last)\\s*([\\w-]*)\\b'
                        'captures':
                            '1':
                                'name': 'storage.name.table.oe'
                    }
                    {
                        'match': '\\b([\\w\\d-]+\\.[\\w\\d-]+)\\b'
                        'name': 'storage.name.table.field.oe'
                    }
                ]
            }
        ]
    'doStatement':
        'patterns': [
            {
                'begin': '\\b(?i:do)\\b'
                'end': '\\b[\\.:]'
                'name': 'keyword.control.do.oe'
                'patterns': [
                    {
                        'include': '#oeConstants'
                    }
                    {
                        'include': '#numbers'
                    }
                    {
                        'include': '#strings'
                    }
                    {
                        'include': '#preProcVar'
                    }
                ]
            }
        ]
